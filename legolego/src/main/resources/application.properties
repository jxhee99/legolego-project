server.servlet.encoding.force=true
spring.h2.console.enabled=true
spring.jpa.deferdatasource-initialization=true

##MySQL
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
##DB Source URL
#spring.datasource.url=jdbc:mysql://localhost:3306/lego

#MariaDB
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3307/lego
spring.datasource.username=root
spring.datasource.password=1234

#처리시 발생하는 SQL을 보여줄 것인지 결정
spring.jpa.show-sql=true
#프로젝트 실행시 자동으로 DDL(create, alter, drop) 을 생성할 것 인지 결정하는 설정
#create : 매번 테이블 생성을 새로 시도한다
#update : 변경이 필요한 경우 alter로 변경되고 테이블이 없는경우 create가 된다
spring.jpa.hibernate.ddl-auto=update
#실제 JPA 구현체인 Hibernate가 동작하면서 발생하는 SQL을 포맷팅해서 출력한다
#-> 실행되는 SQL의 가독성을 높여준다
spring.jpa.properties.hibernate.format_sql=true

#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect


# 전체 로그 레벨 설정 (기본값은 INFO)
logging.level.root=INFO

# 특정 패키지 또는 클래스에 대한 로그 레벨 설정 예시
logging.level.com.kosta=DEBUG
logging.level.org.springframework.web=DEBUG

#api 서비스키
spring.profiles.include=apikey

jwt.issuer=${JWT_ISSUER:http://localhost:8080}
jwt.secret_key=${JWT_SECRET_KEY}

# 메일 설정 (비밀번호 재설정 요청)
# 이메일의 기본 인코딩 방식을 UTF-8로 설정
spring.mail.default-encoding=UTF-8	
# 이메일 발송에 사용될 SMTP 서버 호스트 주소를 설정, 구글의 SMTP 서버를 사용
spring.mail.host=smtp.gmail.com
# SMTP 서버와 통신에 사용될 포트 번호를 설정
spring.mail.port=587
#  이메일 발송에 사용될 계정의 이메일 주소를 설정
spring.mail.username=${MAIL_USERNAME}
# 이메일 발송에 사용될 계정의 비밀번호를 설정 (앱 비밀번호)
spring.mail.password=${MAIL_PASSWORD}
# TLS 암호화를 사용하여 이메일을 전송
spring.mail.properties.mail.smtp.starttls.enable=true
# TLS 암호화를 필수로 사용
spring.mail.properties.mail.smtp.starttls.required=true
# SMTP 인증을 사용
spring.mail.properties.mail.smtp.auth=true
#  디버깅을 위한 설정으로, 이메일 발송 과정에서 발생하는 문제를 추적
spring.mail.properties.mail.debug=true
# 이메일 본문의 인코딩 방식을 UTF-8로 설정
spring.mail.properties.mail.mime.charset=UTF-8
#  이메일을 전송할 프로토콜을 SMTP로 설정
spring.mail.properties.mail.transport.protocol=smtp

